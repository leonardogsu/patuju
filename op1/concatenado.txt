================================================================================
CONCATENACI√ìN DE ARCHIVOS
================================================================================
Directorio ra√≠z: E:\git\wordpress-multisite
Total de archivos: 27
Fecha: 1761144612.4513624
================================================================================


================================================================================
üìÑ ARCHIVO 1/27
================================================================================
Ruta relativa: .env
Path completo:  E:\git\wordpress-multisite\.env
================================================================================

# Variables de entorno - CAMBIAR ESTOS VALORES

# MySQL
MYSQL_ROOT_PASSWORD=NT1cESyX@@-:1S7_
DB_PASSWORD=i>T;g9E5?4[4Qa+%

# FTP
FTP_PASSWORD=UiLJBMt+k.f6RQ1p

# Servidor
SERVER_IP=146.59.228.174

# Dominios
DOMAIN_1=guaman.es
DOMAIN_2=guaman.eu
DOMAIN_3=guaman.net
DOMAIN_4=guaman.org
DOMAIN_5=yeye.help
DOMAIN_6=yeyehelp.es
DOMAIN_7=yeyehelp.net
DOMAIN_8=yeyehelp.org
DOMAIN_9=yhlp.es
DOMAIN_10=leo.guaman.es



================================================================================
üìÑ ARCHIVO 2/27
================================================================================
Ruta relativa: .gitignore
Path completo:  E:\git\wordpress-multisite\.gitignore
================================================================================

# Variables de entorno
.env

# WordPress
www/*/wp-config.php
www/*/wp-content/uploads/
www/*/wp-content/cache/
www/*/wp-content/upgrade/
www/*/wp-content/backups/

# MySQL
mysql/data/

# Logs
logs/
*.log

# Backups
backups/

# Certificados SSL
certbot/conf/
certbot/www/

# Archivos temporales
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Docker
.docker/



================================================================================
üìÑ ARCHIVO 3/27
================================================================================
Ruta relativa: docker-compose.yml
Path completo:  E:\git\wordpress-multisite\docker-compose.yml
================================================================================

version: '3.8'

services:
  # Servidor Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx-web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./www:/var/www/html
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - php
    networks:
      - wordpress-network
    restart: unless-stopped

  # PHP-FPM
  php:
    image: wordpress:php8.2-fpm-alpine
    container_name: php-fpm
    volumes:
      - ./www:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/conf.d/custom.ini:ro
      - ./php/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: wpuser
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - wordpress-network
    restart: unless-stopped
    depends_on:
      - mysql

  # MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: wpuser
      MYSQL_PASSWORD: ${DB_PASSWORD}
    networks:
      - wordpress-network
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: wpuser
      PMA_PASSWORD: ${DB_PASSWORD}
      UPLOAD_LIMIT: 100M
    networks:
      - wordpress-network
    restart: unless-stopped
    depends_on:
      - mysql

  # Certbot para Let's Encrypt
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - wordpress-network

  # Servidor FTP
  ftp:
    image: delfer/alpine-ftp-server
    container_name: ftp-server
    ports:
      - "21:21"
      - "21000-21010:21000-21010"
    volumes:
      - ./www:/home/ftpuser/www
    environment:
      USERS: "ftpuser|${FTP_PASSWORD}|/home/ftpuser/www"
      ADDRESS: ${SERVER_IP}
    networks:
      - wordpress-network
    restart: unless-stopped

networks:
  wordpress-network:
    driver: bridge

volumes:
  mysql-data:



================================================================================
üìÑ ARCHIVO 4/27
================================================================================
Ruta relativa: mysql\init\01-init-databases.sql
Path completo:  E:\git\wordpress-multisite\mysql\init\01-init-databases.sql
================================================================================

-- Script de inicializaci√≥n para crear las 10 bases de datos WordPress

-- Crear bases de datos
CREATE DATABASE IF NOT EXISTS wp_sitio1 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio2 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio3 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio4 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio5 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio6 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio7 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio8 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio9 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE DATABASE IF NOT EXISTS wp_sitio10 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Otorgar privilegios al usuario wpuser sobre todas las bases de datos
GRANT ALL PRIVILEGES ON wp_sitio1.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio2.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio3.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio4.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio5.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio6.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio7.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio8.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio9.* TO 'wpuser'@'%';
GRANT ALL PRIVILEGES ON wp_sitio10.* TO 'wpuser'@'%';

-- Aplicar cambios
FLUSH PRIVILEGES;

-- Crear usuario adicional de solo lectura para backups (opcional)
CREATE USER IF NOT EXISTS 'backup_user'@'%' IDENTIFIED BY 'backup_password_cambiar';
GRANT SELECT, LOCK TABLES, SHOW VIEW ON *.* TO 'backup_user'@'%';
FLUSH PRIVILEGES;



================================================================================
üìÑ ARCHIVO 5/27
================================================================================
Ruta relativa: mysql\my.cnf
Path completo:  E:\git\wordpress-multisite\mysql\my.cnf
================================================================================

[mysqld]
# Configuraci√≥n optimizada para WordPress multisite (8GB RAM)

# Directorio de datos
datadir = /var/lib/mysql

# Networking
port = 3306
bind-address = 0.0.0.0
skip-name-resolve

# Conexiones
max_connections = 100
max_connect_errors = 10000
wait_timeout = 600
interactive_timeout = 600

# InnoDB (motor recomendado para WordPress)
default-storage-engine = InnoDB
innodb_buffer_pool_size = 512M
innodb_log_file_size = 128M
innodb_log_buffer_size = 8M
innodb_flush_log_at_trx_commit = 2
innodb_flush_method = O_DIRECT
innodb_file_per_table = 1

# Query Cache (√∫til para WordPress)
query_cache_type = 1
query_cache_size = 64M
query_cache_limit = 2M

# Buffers
tmp_table_size = 64M
max_heap_table_size = 64M
sort_buffer_size = 2M
read_buffer_size = 1M
read_rnd_buffer_size = 2M
join_buffer_size = 2M

# Tablas temporales
tmpdir = /tmp

# Logs (desactivar en producci√≥n si no son necesarios)
slow_query_log = 1
slow_query_log_file = /var/log/mysql/mysql-slow.log
long_query_time = 2
log_queries_not_using_indexes = 0

# Seguridad
local_infile = 0
symbolic-links = 0

# Charset
character-set-server = utf8mb4
collation-server = utf8mb4_unicode_ci

# Otros
max_allowed_packet = 64M
table_open_cache = 2000
open_files_limit = 10000

[client]
default-character-set = utf8mb4

[mysql]
default-character-set = utf8mb4



================================================================================
üìÑ ARCHIVO 6/27
================================================================================
Ruta relativa: nginx\conf.d\phpmyadmin.conf
Path completo:  E:\git\wordpress-multisite\nginx\conf.d\phpmyadmin.conf
================================================================================

# phpMyAdmin - SOLO ACCESIBLE DESDE IP ESPEC√çFICA O CON AUTENTICACI√ìN
server {
    listen 80;
    server_name pma.tu-dominio.com;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name pma.tu-dominio.com;

    ssl_certificate /etc/letsencrypt/live/pma.tu-dominio.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/pma.tu-dominio.com/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

    access_log /var/log/nginx/phpmyadmin-access.log;
    error_log /var/log/nginx/phpmyadmin-error.log;

    # SEGURIDAD: Restringir acceso por IP (descomenta y ajusta)
    # allow 123.456.789.0;  # Tu IP
    # deny all;

    # O usar autenticaci√≥n b√°sica (recomendado)
    # auth_basic "√Årea restringida";
    # auth_basic_user_file /etc/nginx/.htpasswd;

    location / {
        proxy_pass http://phpmyadmin:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Rate limiting adicional
    location ~ ^/(index\.php)?$ {
        limit_req zone=general burst=5 nodelay;
        proxy_pass http://phpmyadmin:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}



================================================================================
üìÑ ARCHIVO 7/27
================================================================================
Ruta relativa: nginx\conf.d\sitio1.conf
Path completo:  E:\git\wordpress-multisite\nginx\conf.d\sitio1.conf
================================================================================

# Sitio Principal - sitio1.com (10K visitas/d√≠a)
server {
    listen 80;
    listen [::]:80;
    server_name sitio1.com www.sitio1.com;

    # Certbot challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect a HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name sitio1.com www.sitio1.com;

    root /var/www/html/sitio1;
    index index.php index.html;

    # SSL Certificates
    ssl_certificate /etc/letsencrypt/live/sitio1.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sitio1.com/privkey.pem;
    
    # SSL Configuration (seguridad moderna)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Logs
    access_log /var/log/nginx/sitio1-access.log;
    error_log /var/log/nginx/sitio1-error.log;

    # Seguridad adicional
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # WordPress permalinks
    location / {
        limit_req zone=general burst=20 nodelay;
        try_files $uri $uri/ /index.php?$args;
    }

    # PHP-FPM
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_buffering off;
        fastcgi_read_timeout 300;
    }

    # Protecci√≥n wp-login.php
    location = /wp-login.php {
        limit_req zone=wplogin burst=2 nodelay;
        fastcgi_pass php:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # Bloquear acceso a archivos sensibles
    location ~ /\.ht {
        deny all;
    }

    location = /xmlrpc.php {
        deny all;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }

    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    # Bloquear wp-config.php
    location ~* wp-config.php {
        deny all;
    }

    # Archivos est√°ticos con cach√©
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform, immutable";
        access_log off;
    }

    # Deshabilitar logs para archivos comunes
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        log_not_found off;
        access_log off;
    }
}



================================================================================
üìÑ ARCHIVO 8/27
================================================================================
Ruta relativa: nginx\conf.d\sitio2.conf
Path completo:  E:\git\wordpress-multisite\nginx\conf.d\sitio2.conf
================================================================================

# Sitio 2 - sitio2.com (1K visitas/d√≠a)
server {
    listen 80;
    listen [::]:80;
    server_name sitio2.com www.sitio2.com;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name sitio2.com www.sitio2.com;

    root /var/www/html/sitio2;
    index index.php index.html;

    ssl_certificate /etc/letsencrypt/live/sitio2.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sitio2.com/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    access_log /var/log/nginx/sitio2-access.log;
    error_log /var/log/nginx/sitio2-error.log;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    location = /wp-login.php {
        limit_req zone=wplogin burst=2 nodelay;
        fastcgi_pass php:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    location ~ /\.ht {
        deny all;
    }

    location = /xmlrpc.php {
        deny all;
    }

    location ~* wp-config.php {
        deny all;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}



================================================================================
üìÑ ARCHIVO 9/27
================================================================================
Ruta relativa: nginx\nginx.conf
Path completo:  E:\git\wordpress-multisite\nginx\nginx.conf
================================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Optimizaciones
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;

    # Seguridad
    server_tokens off;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=wplogin:10m rate=3r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;

    # Incluir configuraciones de sitios
    include /etc/nginx/conf.d/*.conf;
}



================================================================================
üìÑ ARCHIVO 10/27
================================================================================
Ruta relativa: php\php.ini
Path completo:  E:\git\wordpress-multisite\php\php.ini
================================================================================

[PHP]
; Configuraci√≥n optimizada para WordPress multisite

; L√≠mites de memoria y tiempo
memory_limit = 256M
max_execution_time = 300
max_input_time = 300
max_input_vars = 5000

; Uploads
upload_max_filesize = 100M
post_max_size = 100M

; Errores (desactivar en producci√≥n)
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
log_errors = On
error_log = /var/log/php_errors.log

; Sesiones
session.save_handler = files
session.save_path = /tmp
session.gc_maxlifetime = 1440

; Seguridad
expose_php = Off
allow_url_fopen = On
allow_url_include = Off

; OPcache (mejora rendimiento)
opcache.enable = 1
opcache.memory_consumption = 128
opcache.interned_strings_buffer = 8
opcache.max_accelerated_files = 10000
opcache.revalidate_freq = 60
opcache.fast_shutdown = 1
opcache.enable_cli = 0

; Realpath cache
realpath_cache_size = 4096K
realpath_cache_ttl = 600



================================================================================
üìÑ ARCHIVO 11/27
================================================================================
Ruta relativa: php\www.conf
Path completo:  E:\git\wordpress-multisite\php\www.conf
================================================================================

[www]
user = www-data
group = www-data

; Socket de comunicaci√≥n con Nginx
listen = 9000

; Permisos del socket
listen.owner = www-data
listen.group = www-data
listen.mode = 0660

; Gesti√≥n de procesos (optimizado para 8GB RAM y 10 sitios)
pm = dynamic

; N√∫mero m√°ximo de procesos hijos
pm.max_children = 20

; Procesos al iniciar
pm.start_servers = 4

; M√≠nimo de procesos en espera
pm.min_spare_servers = 2

; M√°ximo de procesos en espera
pm.max_spare_servers = 6

; N√∫mero de peticiones antes de reiniciar proceso
pm.max_requests = 500

; Timeouts
request_terminate_timeout = 300
request_slowlog_timeout = 10s
slowlog = /var/log/php-fpm-slow.log

; Variables de entorno
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp

; Status page (√∫til para monitoreo)
pm.status_path = /status
ping.path = /ping

; L√≠mites de seguridad
php_admin_value[error_log] = /var/log/php-fpm-www-error.log
php_admin_flag[log_errors] = on



================================================================================
üìÑ ARCHIVO 12/27
================================================================================
Ruta relativa: QUICKSTART.md
Path completo:  E:\git\wordpress-multisite\QUICKSTART.md
================================================================================

# üöÄ Gu√≠a de Inicio R√°pido

## Paso 1: Preparaci√≥n (5 minutos)

```bash
# 1. Descargar y descomprimir el proyecto
cd /opt
# (copiar archivos del proyecto aqu√≠)

# 2. Editar variables de entorno
nano .env

# CAMBIAR OBLIGATORIAMENTE:
# - MYSQL_ROOT_PASSWORD
# - DB_PASSWORD
# - FTP_PASSWORD
# - SERVER_IP (tu IP p√∫blica)
# - Todos los dominios (DOMAIN_1, DOMAIN_2, etc.)
```

## Paso 2: Verificaci√≥n (2 minutos)

```bash
# Dar permisos a scripts
chmod +x scripts/*.sh

# Verificar que todo est√° OK
./scripts/verify.sh
```

## Paso 3: Despliegue (10 minutos)

```bash
# Ejecutar setup autom√°tico
./scripts/setup.sh
```

Este script:
- ‚úÖ Crea directorios
- ‚úÖ Descarga WordPress
- ‚úÖ Configura permisos
- ‚úÖ Inicia contenedores

## Paso 4: Configurar DNS

Para cada dominio, crea un registro A apuntando a tu IP:

```
Tipo: A
Nombre: @
Valor: TU_IP_DEL_SERVIDOR
TTL: 300

Tipo: A
Nombre: www
Valor: TU_IP_DEL_SERVIDOR
TTL: 300
```

Espera 5-15 minutos para propagaci√≥n DNS.

## Paso 5: Obtener SSL (5 minutos cada dominio)

```bash
# Para cada dominio:
./scripts/get-ssl.sh sitio1.com admin@sitio1.com
./scripts/get-ssl.sh sitio2.com admin@sitio2.com
# ... repetir para los 10 sitios
```

## Paso 6: Configurar WordPress (5 minutos por sitio)

Para cada sitio (sitio1 a sitio10):

```bash
# 1. Copiar plantilla de configuraci√≥n
cp wp-config-sample.php www/sitio1/wp-config.php

# 2. Editar configuraci√≥n
nano www/sitio1/wp-config.php
```

Cambiar:
- `DB_NAME`: `wp_sitio1` (wp_sitio2, wp_sitio3, etc.)
- `DB_PASSWORD`: (tu password del .env)
- Generar claves en: https://api.wordpress.org/secret-key/1.1/salt/

```bash
# 3. Establecer permisos
chown -R www-data:www-data www/sitio1/
```

Luego acceder a `https://sitio1.com` y completar instalaci√≥n.

## Paso 7: Acceso a servicios

### Sitios web
- https://sitio1.com
- https://sitio2.com
- ... etc

### phpMyAdmin
https://pma.tu-dominio.com

### FTP
- Host: TU_IP
- Puerto: 21
- Usuario: ftpuser
- Password: (del .env)

## Comandos √∫tiles

```bash
# Ver estado
docker-compose ps

# Ver logs
docker-compose logs -f

# Reiniciar servicio
docker-compose restart nginx

# Monitor completo
./scripts/monitor.sh

# Backup
./scripts/backup.sh

# Generar configuraci√≥n de nuevo sitio
./scripts/generate-site-config.sh 3 sitio3.com
```

## Troubleshooting r√°pido

### Los contenedores no inician
```bash
docker-compose logs
docker-compose down
docker-compose up -d
```

### Error de SSL
```bash
# Verificar que DNS apunta correctamente
nslookup sitio1.com

# Reintentar certificado
./scripts/get-ssl.sh sitio1.com
```

### WordPress muestra error de conexi√≥n a BD
```bash
# Verificar que MySQL est√° corriendo
docker exec -it mysql-db mysql -u wpuser -p

# Verificar wp-config.php tiene:
# DB_HOST: mysql (no localhost)
```

### Acceso denegado phpMyAdmin
```bash
# Editar nginx/conf.d/phpmyadmin.conf
# Permitir tu IP o activar auth b√°sica
docker-compose restart nginx
```

## Pr√≥ximos pasos

1. Instalar plugins de seguridad (Wordfence, iThemes Security)
2. Configurar backups autom√°ticos con cron
3. Optimizar im√°genes (WP Smush, ShortPixel)
4. Configurar CDN (Cloudflare)
5. Instalar plugin de cach√© (WP Super Cache, W3 Total Cache)

## Recursos adicionales

- [Documentaci√≥n completa](README.md)
- [WordPress Codex](https://codex.wordpress.org/)
- [Nginx Docs](https://nginx.org/en/docs/)
- [Docker Docs](https://docs.docker.com/)

---

**Tiempo total estimado:** 1-2 horas para configuraci√≥n completa
**Dificultad:** Media
**Conocimientos necesarios:** Linux b√°sico, Docker b√°sico



================================================================================
üìÑ ARCHIVO 13/27
================================================================================
Ruta relativa: README.md
Path completo:  E:\git\wordpress-multisite\README.md
================================================================================

# WordPress Multisite con Docker

Stack completo para alojar 10 sitios WordPress con Nginx, PHP-FPM, MySQL, SSL y FTP.

## üìã Requisitos

- VPS con Ubuntu 24 y 8GB RAM
- Docker y Docker Compose instalados
- Dominios apuntando a la IP del servidor
- Puertos abiertos: 80, 443, 21, 21000-21010

## üèóÔ∏è Arquitectura

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ           Nginx (Reverse Proxy)         ‚îÇ
‚îÇ  - 10 Virtual Hosts                     ‚îÇ
‚îÇ  - SSL/TLS (Let's Encrypt)              ‚îÇ
‚îÇ  - Rate Limiting                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ         PHP-FPM (Shared Pool)           ‚îÇ
‚îÇ  - WordPress 10 instalaciones           ‚îÇ
‚îÇ  - OPcache enabled                      ‚îÇ
‚îÇ  - Memory: 256M por proceso             ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ          MySQL 8.0                      ‚îÇ
‚îÇ  - 10 bases de datos separadas          ‚îÇ
‚îÇ  - Buffer Pool: 512MB                   ‚îÇ
‚îÇ  - Query Cache: 64MB                    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìÅ Estructura de Directorios

```
wordpress-multisite/
‚îú‚îÄ‚îÄ docker-compose.yml          # Configuraci√≥n principal
‚îú‚îÄ‚îÄ .env                        # Variables de entorno (CONFIGURAR)
‚îú‚îÄ‚îÄ nginx/
‚îÇ   ‚îú‚îÄ‚îÄ nginx.conf             # Configuraci√≥n principal Nginx
‚îÇ   ‚îî‚îÄ‚îÄ conf.d/                # Virtual hosts
‚îÇ       ‚îú‚îÄ‚îÄ sitio1.conf
‚îÇ       ‚îú‚îÄ‚îÄ sitio2.conf
‚îÇ       ‚îî‚îÄ‚îÄ phpmyadmin.conf
‚îú‚îÄ‚îÄ php/
‚îÇ   ‚îú‚îÄ‚îÄ php.ini                # Configuraci√≥n PHP
‚îÇ   ‚îî‚îÄ‚îÄ www.conf               # Pool PHP-FPM
‚îú‚îÄ‚îÄ mysql/
‚îÇ   ‚îú‚îÄ‚îÄ my.cnf                 # Configuraci√≥n MySQL
‚îÇ   ‚îî‚îÄ‚îÄ init/
‚îÇ       ‚îî‚îÄ‚îÄ 01-init-databases.sql
‚îú‚îÄ‚îÄ www/                        # Archivos WordPress
‚îÇ   ‚îú‚îÄ‚îÄ sitio1/
‚îÇ   ‚îú‚îÄ‚îÄ sitio2/
‚îÇ   ‚îî‚îÄ‚îÄ ... (hasta sitio10)
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ setup.sh               # Setup inicial
‚îÇ   ‚îú‚îÄ‚îÄ get-ssl.sh             # Obtener certificados SSL
‚îÇ   ‚îú‚îÄ‚îÄ backup.sh              # Backup autom√°tico
‚îÇ   ‚îî‚îÄ‚îÄ generate-site-config.sh # Generar configs
‚îú‚îÄ‚îÄ certbot/                    # Certificados SSL
‚îú‚îÄ‚îÄ logs/                       # Logs de Nginx
‚îî‚îÄ‚îÄ backups/                    # Backups autom√°ticos
```

## üöÄ Instalaci√≥n

### 1. Preparar el entorno

```bash
# Clonar o crear el directorio
mkdir wordpress-multisite && cd wordpress-multisite

# Copiar todos los archivos del proyecto aqu√≠
```

### 2. Configurar variables de entorno

```bash
# Editar .env con tus valores
nano .env
```

**IMPORTANTE:** Cambiar TODAS las contrase√±as en `.env`:
- `MYSQL_ROOT_PASSWORD`: Contrase√±a root de MySQL
- `DB_PASSWORD`: Contrase√±a para usuario wpuser
- `FTP_PASSWORD`: Contrase√±a FTP
- `SERVER_IP`: Tu IP del servidor

### 3. Configurar dominios

Edita las configuraciones en `nginx/conf.d/` y reemplaza los dominios de ejemplo con tus dominios reales.

Para generar configs adicionales:
```bash
chmod +x scripts/generate-site-config.sh
./scripts/generate-site-config.sh 3 sitio3.com
./scripts/generate-site-config.sh 4 sitio4.com
# ... etc
```

### 4. Ejecutar setup inicial

```bash
chmod +x scripts/*.sh
./scripts/setup.sh
```

Este script:
- ‚úÖ Verifica dependencias
- ‚úÖ Crea directorios necesarios
- ‚úÖ Descarga WordPress en cada sitio
- ‚úÖ Configura permisos
- ‚úÖ Inicia contenedores

### 5. Obtener certificados SSL

Para cada dominio:

```bash
./scripts/get-ssl.sh sitio1.com admin@sitio1.com
./scripts/get-ssl.sh sitio2.com admin@sitio2.com
# ... repetir para los 10 sitios
```

**Nota:** Los dominios deben apuntar a tu servidor antes de obtener SSL.

### 6. Configurar WordPress

Para cada sitio, crea/edita `www/sitioX/wp-config.php`:

```php
define('DB_NAME', 'wp_sitioX');
define('DB_USER', 'wpuser');
define('DB_PASSWORD', 'tu_password_del_env');
define('DB_HOST', 'mysql');
define('DB_CHARSET', 'utf8mb4');
define('DB_COLLATE', 'utf8mb4_unicode_ci');

// Generar keys en: https://api.wordpress.org/secret-key/1.1/salt/
define('AUTH_KEY',         'generar-aqui');
define('SECURE_AUTH_KEY',  'generar-aqui');
// ... etc

$table_prefix = 'wp_';
define('WP_DEBUG', false);

if ( !defined('ABSPATH') )
    define('ABSPATH', dirname(__FILE__) . '/');

require_once(ABSPATH . 'wp-settings.php');
```

Luego accede a `https://sitioX.com` y completa la instalaci√≥n web.

## üîß Comandos √ötiles

### Docker

```bash
# Ver contenedores
docker-compose ps

# Ver logs
docker-compose logs -f
docker-compose logs nginx
docker-compose logs php
docker-compose logs mysql

# Reiniciar servicios
docker-compose restart nginx
docker-compose restart php

# Detener todo
docker-compose down

# Iniciar todo
docker-compose up -d

# Reconstruir contenedores
docker-compose up -d --build
```

### Gesti√≥n de sitios

```bash
# Acceder al contenedor PHP
docker exec -it php-fpm bash

# Acceder a MySQL
docker exec -it mysql-db mysql -u root -p

# Ver uso de recursos
docker stats
```

### Backups

```bash
# Backup manual
./scripts/backup.sh

# Configurar backup autom√°tico diario (crontab)
crontab -e
# Agregar:
0 2 * * * cd /ruta/a/wordpress-multisite && ./scripts/backup.sh
```

## üîí Seguridad

### Implementada

‚úÖ SSL/TLS con Let's Encrypt  
‚úÖ Rate limiting en wp-login.php  
‚úÖ Bloqueo de xmlrpc.php  
‚úÖ Protecci√≥n de archivos sensibles (.htaccess, wp-config.php)  
‚úÖ Headers de seguridad (X-Frame-Options, X-XSS-Protection)  
‚úÖ HSTS habilitado  
‚úÖ Contrase√±as en variables de entorno  

### Recomendaciones adicionales

1. **Firewall (UFW)**
```bash
ufw allow 22/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 21/tcp
ufw allow 21000:21010/tcp
ufw enable
```

2. **Fail2ban** para proteger SSH y wp-login

3. **Restricci√≥n de phpMyAdmin por IP**
Edita `nginx/conf.d/phpmyadmin.conf`:
```nginx
allow 123.456.789.0;  # Tu IP
deny all;
```

4. **Autenticaci√≥n b√°sica para phpMyAdmin**
```bash
# Crear archivo de contrase√±as
docker exec -it nginx-web sh
apk add apache2-utils
htpasswd -c /etc/nginx/.htpasswd admin
exit
```

Descomentar en `phpmyadmin.conf`:
```nginx
auth_basic "√Årea restringida";
auth_basic_user_file /etc/nginx/.htpasswd;
```

## üìä Monitoreo

### Recursos del sistema
```bash
# RAM y CPU
htop

# Uso de disco
df -h

# Contenedores
docker stats --no-stream
```

### MySQL
```bash
# Acceder a MySQL
docker exec -it mysql-db mysql -u root -p

# Ver bases de datos y tama√±os
SELECT 
  table_schema AS 'Database',
  ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'Size (MB)'
FROM information_schema.TABLES
GROUP BY table_schema;

# Ver procesos
SHOW PROCESSLIST;
```

### PHP-FPM Status
```bash
# Acceder a status page
curl http://localhost/status?full
```

## üåê Acceso a servicios

- **Sitios web:** https://sitio1.com, https://sitio2.com, etc.
- **phpMyAdmin:** https://pma.tu-dominio.com
- **FTP:**
  - Host: IP del servidor
  - Puerto: 21
  - Usuario: ftpuser
  - Password: (del .env)
  - Directorio: /www

## üêõ Troubleshooting

### Nginx no inicia
```bash
# Ver logs
docker-compose logs nginx

# Verificar sintaxis
docker exec nginx-web nginx -t
```

### PHP-FPM lento
```bash
# Ver procesos activos
docker exec php-fpm ps aux

# Aumentar pm.max_children en php/www.conf
```

### MySQL sin conexi√≥n
```bash
# Ver logs
docker-compose logs mysql

# Verificar usuario y permisos
docker exec -it mysql-db mysql -u root -p
SHOW GRANTS FOR 'wpuser'@'%';
```

### Errores SSL
```bash
# Renovar manualmente
docker-compose run --rm certbot renew --force-renewal

# Verificar certificado
openssl s_client -connect sitio1.com:443 -servername sitio1.com
```

## üìà Optimizaciones

### Para m√°s tr√°fico

Si un sitio supera 10K visitas/d√≠a:

1. **Pool PHP-FPM dedicado** en `php/www.conf`
2. **Nginx cache** con fastcgi_cache
3. **Redis/Memcached** para object cache
4. **CDN** para assets est√°ticos

### Para ahorrar recursos

Si hay sitios inactivos:

1. Usar un solo pool PHP-FPM m√°s peque√±o
2. Reducir `innodb_buffer_pool_size` en MySQL
3. Deshabilitar logs de acceso en sitios con poco tr√°fico

## üìù Mantenimiento

### Actualizaciones

```bash
# WordPress (desde cada sitio)
wp core update
wp plugin update --all
wp theme update --all

# Contenedores
docker-compose pull
docker-compose up -d
```

### Limpieza

```bash
# Limpiar logs antiguos
find logs/ -name "*.log" -mtime +30 -delete

# Limpiar backups antiguos (autom√°tico en backup.sh)
find backups/ -name "*.tar.gz" -mtime +7 -delete

# Limpiar Docker
docker system prune -a
```

## üíæ Consumo de Recursos Estimado

Con 19K visitas/d√≠a totales:

| Servicio | RAM | CPU |
|----------|-----|-----|
| Nginx | ~150MB | <5% |
| PHP-FPM | ~1-1.5GB | 10-20% |
| MySQL | ~600MB | 5-10% |
| phpMyAdmin | ~50MB | <1% |
| FTP | ~20MB | <1% |
| **Total** | **~2.5-3GB** | **20-35%** |

Sobran ~5GB RAM para picos y cach√© del sistema.

## üìû Soporte

Para problemas o dudas:
1. Revisa los logs: `docker-compose logs -f`
2. Verifica la configuraci√≥n: `docker exec nginx-web nginx -t`
3. Consulta la documentaci√≥n oficial de cada componente

---

**Autor:** Claude  
**Versi√≥n:** 1.0  
**√öltima actualizaci√≥n:** 2025



================================================================================
üìÑ ARCHIVO 14/27
================================================================================
Ruta relativa: scripts\bash\backup.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\backup.sh
================================================================================

#!/bin/bash
# Script de backup para WordPress Multisite

set -e

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

BACKUP_DIR="backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="backup_$DATE"

echo "==================================="
echo "Backup WordPress Multisite"
echo "==================================="
echo "Fecha: $(date)"
echo ""

# Crear directorio de backups
mkdir -p $BACKUP_DIR/$BACKUP_NAME

echo -e "${YELLOW}1. Haciendo backup de archivos...${NC}"

# Backup de archivos WordPress
tar -czf $BACKUP_DIR/$BACKUP_NAME/wordpress-files.tar.gz www/ 2>/dev/null
echo -e "${GREEN}‚úì Archivos respaldados${NC}"

echo ""
echo -e "${YELLOW}2. Haciendo backup de bases de datos...${NC}"

# Cargar contrase√±a de .env
if [ -f ".env" ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Backup de cada base de datos
for i in {1..10}; do
    echo "Respaldando wp_sitio$i..."
    docker exec mysql-db mysqldump \
        -u wpuser \
        -p$DB_PASSWORD \
        wp_sitio$i > $BACKUP_DIR/$BACKUP_NAME/wp_sitio$i.sql
done

echo -e "${GREEN}‚úì Bases de datos respaldadas${NC}"

echo ""
echo -e "${YELLOW}3. Comprimiendo backup...${NC}"

cd $BACKUP_DIR
tar -czf $BACKUP_NAME.tar.gz $BACKUP_NAME/
rm -rf $BACKUP_NAME/
cd ..

BACKUP_SIZE=$(du -h $BACKUP_DIR/$BACKUP_NAME.tar.gz | cut -f1)

echo -e "${GREEN}‚úì Backup comprimido${NC}"

echo ""
echo "==================================="
echo -e "${GREEN}Backup completado!${NC}"
echo "==================================="
echo ""
echo "Archivo: $BACKUP_DIR/$BACKUP_NAME.tar.gz"
echo "Tama√±o: $BACKUP_SIZE"
echo ""
echo "Para restaurar:"
echo "1. Extrae el archivo .tar.gz"
echo "2. Restaura los archivos en www/"
echo "3. Importa cada .sql a su base de datos correspondiente"
echo ""

# Limpiar backups antiguos (mantener √∫ltimos 7 d√≠as)
echo -e "${YELLOW}Limpiando backups antiguos...${NC}"
find $BACKUP_DIR -name "backup_*.tar.gz" -mtime +7 -delete
echo -e "${GREEN}‚úì Limpieza completada${NC}"
echo ""



================================================================================
üìÑ ARCHIVO 15/27
================================================================================
Ruta relativa: scripts\bash\generate-site-config.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\generate-site-config.sh
================================================================================

#!/bin/bash
# Script para generar configuraciones de Nginx para los sitios restantes

# Uso: ./generate-site-config.sh NUMERO DOMINIO
# Ejemplo: ./generate-site-config.sh 3 sitio3.com

if [ "$#" -ne 2 ]; then
    echo "Uso: $0 NUMERO DOMINIO"
    echo "Ejemplo: $0 3 sitio3.com"
    exit 1
fi

NUMERO=$1
DOMINIO=$2
ARCHIVO="nginx/conf.d/sitio${NUMERO}.conf"

cat > $ARCHIVO << EOF
# Sitio $NUMERO - $DOMINIO (1K visitas/d√≠a)
server {
    listen 80;
    listen [::]:80;
    server_name $DOMINIO www.$DOMINIO;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $DOMINIO www.$DOMINIO;

    root /var/www/html/sitio${NUMERO};
    index index.php index.html;

    ssl_certificate /etc/letsencrypt/live/$DOMINIO/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMINIO/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    access_log /var/log/nginx/sitio${NUMERO}-access.log;
    error_log /var/log/nginx/sitio${NUMERO}-error.log;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        try_files \$uri =404;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    location = /wp-login.php {
        limit_req zone=wplogin burst=2 nodelay;
        fastcgi_pass php:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    location ~ /\.ht {
        deny all;
    }

    location = /xmlrpc.php {
        deny all;
    }

    location ~* wp-config.php {
        deny all;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}
EOF

echo "‚úì Configuraci√≥n creada: $ARCHIVO"
echo ""
echo "Pr√≥ximos pasos:"
echo "1. Revisa el archivo: cat $ARCHIVO"
echo "2. Reinicia Nginx: docker-compose restart nginx"
echo "3. Obt√©n SSL: ./scripts/get-ssl.sh $DOMINIO"



================================================================================
üìÑ ARCHIVO 16/27
================================================================================
Ruta relativa: scripts\bash\get-ssl.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\get-ssl.sh
================================================================================

#!/bin/bash
# Script para obtener certificados SSL con Let's Encrypt

set -e

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

if [ "$#" -lt 1 ]; then
    echo -e "${RED}Uso: $0 dominio.com [email@ejemplo.com]${NC}"
    echo "Ejemplo: $0 sitio1.com admin@sitio1.com"
    exit 1
fi

DOMAIN=$1
EMAIL=${2:-"admin@$DOMAIN"}

echo "==================================="
echo "Obteniendo certificado SSL"
echo "==================================="
echo "Dominio: $DOMAIN"
echo "Email: $EMAIL"
echo ""

# Verificar que Nginx est√° corriendo
if ! docker ps | grep -q nginx-web; then
    echo -e "${RED}Error: Contenedor nginx-web no est√° corriendo${NC}"
    echo "Ejecuta: docker-compose up -d"
    exit 1
fi

echo -e "${YELLOW}1. Verificando configuraci√≥n de Nginx...${NC}"

# Verificar que existe la configuraci√≥n del dominio
CONF_FILE="nginx/conf.d/$(echo $DOMAIN | sed 's/www\.//').conf"
if [ ! -f "$CONF_FILE" ]; then
    echo -e "${RED}Error: No se encontr√≥ $CONF_FILE${NC}"
    echo "Crea la configuraci√≥n de Nginx primero"
    exit 1
fi

echo -e "${GREEN}‚úì Configuraci√≥n encontrada${NC}"

echo ""
echo -e "${YELLOW}2. Obteniendo certificado...${NC}"

# Obtener certificado
docker-compose run --rm certbot certonly \
    --webroot \
    --webroot-path=/var/www/certbot \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    -d $DOMAIN \
    -d www.$DOMAIN

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úì Certificado obtenido exitosamente${NC}"
    
    echo ""
    echo -e "${YELLOW}3. Reiniciando Nginx...${NC}"
    docker-compose restart nginx
    
    echo ""
    echo -e "${GREEN}==================================="
    echo "¬°Certificado SSL instalado!"
    echo "===================================${NC}"
    echo ""
    echo "Tu sitio ahora est√° disponible en: https://$DOMAIN"
    echo ""
    echo "El certificado se renovar√° autom√°ticamente."
    echo ""
else
    echo -e "${RED}Error al obtener el certificado${NC}"
    echo ""
    echo "Verifica que:"
    echo "1. El dominio $DOMAIN apunta a tu servidor"
    echo "2. Los puertos 80 y 443 est√°n abiertos"
    echo "3. Nginx est√° corriendo correctamente"
    exit 1
fi



================================================================================
üìÑ ARCHIVO 17/27
================================================================================
Ruta relativa: scripts\bash\install-docker\install-docker.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\install-docker\install-docker.sh
================================================================================

#!/bin/bash

#############################################
# Script de instalaci√≥n desatendida de Docker
# y Docker Compose para Ubuntu 24.04
#############################################

set -e  # Detener el script si hay alg√∫n error

# Colores para mensajes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # Sin color

# Funci√≥n para imprimir mensajes
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[ADVERTENCIA]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar si el script se ejecuta como root o con sudo
if [[ $EUID -ne 0 ]]; then
   print_error "Este script debe ejecutarse como root o con sudo"
   exit 1
fi

# Obtener el nombre del usuario que invoc√≥ sudo
if [ -n "$SUDO_USER" ]; then
    REAL_USER=$SUDO_USER
else
    REAL_USER=$(whoami)
fi

print_message "Iniciando instalaci√≥n de Docker y Docker Compose..."

# 1. Actualizar el sistema
print_message "Actualizando el sistema..."
apt update -y
apt upgrade -y

# 2. Instalar paquetes necesarios
print_message "Instalando dependencias..."
apt install -y ca-certificates curl gnupg lsb-release

# 3. Eliminar instalaciones antiguas de Docker (si existen)
print_message "Eliminando versiones antiguas de Docker (si existen)..."
apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true

# 4. Crear directorio para las claves
print_message "Configurando repositorio de Docker..."
install -m 0755 -d /etc/apt/keyrings

# 5. A√±adir la clave GPG oficial de Docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg

# 6. Configurar el repositorio
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# 7. Actualizar √≠ndice de paquetes
print_message "Actualizando √≠ndice de paquetes..."
apt update -y

# 8. Instalar Docker Engine y Docker Compose
print_message "Instalando Docker Engine, Docker Compose y plugins..."
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# 9. Iniciar y habilitar el servicio Docker
print_message "Iniciando y habilitando el servicio Docker..."
systemctl start docker
systemctl enable docker

# 10. A√±adir el usuario al grupo docker
if [ "$REAL_USER" != "root" ]; then
    print_message "A√±adiendo el usuario '$REAL_USER' al grupo docker..."
    usermod -aG docker $REAL_USER
    print_warning "Necesitar√°s cerrar sesi√≥n e iniciar sesi√≥n nuevamente para usar Docker sin sudo"
fi

# 11. Verificar la instalaci√≥n
print_message "Verificando la instalaci√≥n..."
echo ""
docker --version
docker compose version
echo ""

# 12. Ejecutar contenedor de prueba
print_message "Ejecutando contenedor de prueba..."
docker run --rm hello-world

# Mensaje final
echo ""
print_message "¬°Instalaci√≥n completada con √©xito!"
echo ""
print_message "Versiones instaladas:"
docker --version
docker compose version
echo ""

if [ "$REAL_USER" != "root" ]; then
    print_warning "Recuerda: Debes cerrar sesi√≥n y volver a iniciarla para usar Docker sin sudo"
    print_message "O ejecuta: newgrp docker (solo funciona en la sesi√≥n actual)"
fi

print_message "Para probar Docker Compose, puedes crear un archivo docker-compose.yml"
print_message "Script finalizado."


================================================================================
üìÑ ARCHIVO 18/27
================================================================================
Ruta relativa: scripts\bash\install-docker\README.md
Path completo:  E:\git\wordpress-multisite\scripts\bash\install-docker\README.md
================================================================================

# Script de Instalaci√≥n de Docker y Docker Compose

Este script automatiza la instalaci√≥n de Docker Engine y Docker Compose en Ubuntu 24.04.

## Caracter√≠sticas

- ‚úÖ Instalaci√≥n desatendida (sin interacci√≥n del usuario)
- ‚úÖ Actualizaci√≥n del sistema
- ‚úÖ Instalaci√≥n de Docker Engine
- ‚úÖ Instalaci√≥n de Docker Compose (plugin)
- ‚úÖ Configuraci√≥n autom√°tica del usuario
- ‚úÖ Verificaci√≥n de la instalaci√≥n
- ‚úÖ Prueba con contenedor hello-world
- ‚úÖ Manejo de errores
- ‚úÖ Mensajes informativos con colores

## Requisitos

- Ubuntu 24.04 LTS
- Acceso root o permisos sudo
- Conexi√≥n a Internet

## Uso

### Opci√≥n 1: Descarga y ejecuci√≥n directa

```bash
# Descargar el script
wget https://tu-servidor.com/install_docker.sh

# Dar permisos de ejecuci√≥n
chmod +x install_docker.sh

# Ejecutar con sudo
sudo ./install_docker.sh
```

### Opci√≥n 2: Ejecuci√≥n en una l√≠nea

```bash
curl -fsSL https://tu-servidor.com/install_docker.sh | sudo bash
```

### Opci√≥n 3: Desde el archivo local

```bash
sudo bash install_docker.sh
```

## Qu√© hace el script

1. Verifica permisos de root/sudo
2. Actualiza el sistema (`apt update && apt upgrade`)
3. Instala dependencias necesarias
4. Elimina versiones antiguas de Docker (si existen)
5. Configura el repositorio oficial de Docker
6. Instala Docker Engine, CLI, containerd y plugins
7. Inicia y habilita el servicio Docker
8. A√±ade el usuario actual al grupo docker
9. Verifica la instalaci√≥n
10. Ejecuta un contenedor de prueba (hello-world)

## Despu√©s de la instalaci√≥n

**Importante:** Para usar Docker sin sudo, debes cerrar sesi√≥n e iniciar sesi√≥n nuevamente, o ejecutar:

```bash
newgrp docker
```

## Verificar la instalaci√≥n

```bash
# Ver versi√≥n de Docker
docker --version

# Ver versi√≥n de Docker Compose
docker compose version

# Probar Docker
docker run hello-world

# Ver estado del servicio
sudo systemctl status docker
```

## Ejemplo de uso con Docker Compose

Crea un archivo `docker-compose.yml`:

```yaml
version: '3.8'

services:
  web:
    image: nginx:latest
    ports:
      - "8080:80"
```

Ejecuta:

```bash
docker compose up -d
```

## Soluci√≥n de problemas

### Error de permisos
Si obtienes errores de permisos despu√©s de la instalaci√≥n:
```bash
sudo usermod -aG docker $USER
newgrp docker
```

### Docker no inicia
```bash
sudo systemctl start docker
sudo systemctl status docker
```

### Verificar logs
```bash
sudo journalctl -u docker.service
```

## Desinstalaci√≥n (si es necesario)

```bash
sudo apt purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
```

## Compatibilidad

- ‚úÖ Ubuntu 24.04 LTS
- ‚úÖ Ubuntu 22.04 LTS
- ‚úÖ Ubuntu 20.04 LTS
- ‚ö†Ô∏è Otras distribuciones: puede requerir ajustes

## Soporte

Este script instala las √∫ltimas versiones estables de Docker y Docker Compose desde los repositorios oficiales de Docker.

## Licencia

Este script es de libre uso y distribuci√≥n.


================================================================================
üìÑ ARCHIVO 19/27
================================================================================
Ruta relativa: scripts\bash\monitor.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\monitor.sh
================================================================================

#!/bin/bash
# Script de monitoreo del stack WordPress Multisite

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

clear
echo "=========================================="
echo "  WordPress Multisite - Monitor"
echo "=========================================="
echo ""
date
echo ""

# Estado de contenedores
echo -e "${BLUE}1. ESTADO DE CONTENEDORES${NC}"
echo "=========================================="
docker-compose ps
echo ""

# Uso de recursos por contenedor
echo -e "${BLUE}2. USO DE RECURSOS${NC}"
echo "=========================================="
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}"
echo ""

# Uso de disco
echo -e "${BLUE}3. USO DE DISCO${NC}"
echo "=========================================="
df -h | grep -E '(Filesystem|/$|/var)'
echo ""

# Tama√±o de directorios WordPress
echo -e "${BLUE}4. TAMA√ëO DE SITIOS${NC}"
echo "=========================================="
for i in {1..10}; do
    if [ -d "www/sitio$i" ]; then
        size=$(du -sh www/sitio$i 2>/dev/null | cut -f1)
        echo "Sitio $i: $size"
    fi
done
echo ""

# MySQL - Tama√±o de bases de datos
echo -e "${BLUE}5. BASES DE DATOS${NC}"
echo "=========================================="
if [ -f ".env" ]; then
    export $(grep -v '^#' .env | xargs)
    docker exec mysql-db mysql -u wpuser -p$DB_PASSWORD -e "
    SELECT 
        table_schema AS 'Database',
        CONCAT(ROUND(SUM(data_length + index_length) / 1024 / 1024, 2), ' MB') AS 'Size'
    FROM information_schema.TABLES
    WHERE table_schema LIKE 'wp_%'
    GROUP BY table_schema
    ORDER BY table_schema;" 2>/dev/null || echo "No se pudo conectar a MySQL"
else
    echo "Archivo .env no encontrado"
fi
echo ""

# Conexiones activas MySQL
echo -e "${BLUE}6. CONEXIONES MYSQL${NC}"
echo "=========================================="
docker exec mysql-db mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW STATUS WHERE variable_name = 'Threads_connected';" 2>/dev/null | tail -n 1 || echo "No disponible"
echo ""

# Logs recientes de Nginx (errores)
echo -e "${BLUE}7. ERRORES RECIENTES (√∫ltimas 5 l√≠neas)${NC}"
echo "=========================================="
if [ -f "logs/nginx/error.log" ]; then
    tail -n 5 logs/nginx/error.log 2>/dev/null || echo "Sin errores recientes"
else
    echo "Archivo de log no encontrado"
fi
echo ""

# Estado de certificados SSL
echo -e "${BLUE}8. CERTIFICADOS SSL${NC}"
echo "=========================================="
for cert in certbot/conf/live/*/cert.pem; do
    if [ -f "$cert" ]; then
        domain=$(echo $cert | cut -d'/' -f4)
        expiry=$(docker exec nginx-web openssl x509 -in /etc/letsencrypt/live/$domain/cert.pem -noout -enddate 2>/dev/null | cut -d'=' -f2)
        echo "$domain: expira $expiry"
    fi
done
[ ! -f "certbot/conf/live/*/cert.pem" ] && echo "Sin certificados instalados"
echo ""

# Salud general
echo -e "${BLUE}9. SALUD GENERAL${NC}"
echo "=========================================="

# Verificar contenedores corriendo
running=$(docker-compose ps | grep -c "Up")
total=6  # nginx, php, mysql, phpmyadmin, certbot, ftp

if [ $running -eq $total ]; then
    echo -e "${GREEN}‚úì Todos los servicios est√°n corriendo ($running/$total)${NC}"
else
    echo -e "${RED}‚úó Algunos servicios est√°n detenidos ($running/$total)${NC}"
fi

# Verificar RAM disponible
ram_available=$(free -m | awk 'NR==2{printf "%.0f", $7}')
if [ $ram_available -gt 2000 ]; then
    echo -e "${GREEN}‚úì RAM disponible: ${ram_available}MB${NC}"
elif [ $ram_available -gt 1000 ]; then
    echo -e "${YELLOW}‚ö† RAM disponible: ${ram_available}MB (moderada)${NC}"
else
    echo -e "${RED}‚úó RAM disponible: ${ram_available}MB (baja)${NC}"
fi

# Verificar disco disponible
disk_available=$(df / | awk 'NR==2{print $4}')
disk_available_gb=$((disk_available / 1024 / 1024))
if [ $disk_available_gb -gt 10 ]; then
    echo -e "${GREEN}‚úì Disco disponible: ${disk_available_gb}GB${NC}"
elif [ $disk_available_gb -gt 5 ]; then
    echo -e "${YELLOW}‚ö† Disco disponible: ${disk_available_gb}GB (moderado)${NC}"
else
    echo -e "${RED}‚úó Disco disponible: ${disk_available_gb}GB (bajo)${NC}"
fi

echo ""
echo "=========================================="
echo "Para logs en tiempo real: docker-compose logs -f"
echo "Para ver un servicio: docker-compose logs [servicio]"
echo "=========================================="



================================================================================
üìÑ ARCHIVO 20/27
================================================================================
Ruta relativa: scripts\bash\passgen\ejemplos_uso.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\passgen\ejemplos_uso.sh
================================================================================

#!/bin/sh
#
# Ejemplos pr√°cticos de uso del generador de contrase√±as
# Estos scripts muestran c√≥mo integrar el generador en tareas comunes
#

# ===========================================
# 1. CREAR USUARIO DE BASE DE DATOS MYSQL
# ===========================================

crear_usuario_mysql() {
    echo "=== Crear Usuario MySQL con Contrase√±a Segura ==="
    
    # Generar contrase√±a
    PASSWORD=$(sh generar_password.sh -l 20 -a | grep -A1 "Contrase√±a" | tail -1 | sed 's/^[[:space:]]*//' | sed 's/\x1b\[[0-9;]*m//g')
    
    USUARIO="nuevo_usuario"
    DATABASE="mi_base_datos"
    
    echo "Usuario: $USUARIO"
    echo "Contrase√±a: $PASSWORD"
    echo ""
    echo "Ejecuta en MySQL:"
    echo "CREATE USER '$USUARIO'@'localhost' IDENTIFIED BY '$PASSWORD';"
    echo "GRANT ALL PRIVILEGES ON $DATABASE.* TO '$USUARIO'@'localhost';"
    echo "FLUSH PRIVILEGES;"
}

# ===========================================
# 2. CREAR USUARIO DE SISTEMA LINUX
# ===========================================

crear_usuario_sistema() {
    echo "=== Crear Usuario de Sistema ==="
    
    USUARIO="webmaster"
    PASSWORD=$(sh generar_password.sh -l 16 -a | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    
    echo "Creando usuario: $USUARIO"
    sudo useradd -m -s /bin/bash "$USUARIO"
    echo "$USUARIO:$PASSWORD" | sudo chpasswd
    
    echo ""
    echo "Usuario creado exitosamente:"
    echo "Usuario: $USUARIO"
    echo "Contrase√±a: $PASSWORD"
    echo ""
    echo "Guarda esta informaci√≥n de forma segura!"
}

# ===========================================
# 3. CONFIGURAR POSTGRESQL
# ===========================================

crear_usuario_postgresql() {
    echo "=== Crear Usuario PostgreSQL ==="
    
    PASSWORD=$(sh generar_password.sh -l 20 -a | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    USUARIO="app_user"
    DATABASE="app_db"
    
    echo "Usuario: $USUARIO"
    echo "Base de datos: $DATABASE"
    echo "Contrase√±a: $PASSWORD"
    echo ""
    echo "Ejecuta en PostgreSQL:"
    echo "CREATE USER $USUARIO WITH PASSWORD '$PASSWORD';"
    echo "CREATE DATABASE $DATABASE OWNER $USUARIO;"
    echo "GRANT ALL PRIVILEGES ON DATABASE $DATABASE TO $USUARIO;"
}

# ===========================================
# 4. GENERAR ARCHIVO .ENV PARA APLICACI√ìN
# ===========================================

generar_archivo_env() {
    echo "=== Generar archivo .env ==="
    
    DB_PASS=$(sh generar_password.sh -l 20 -a | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    JWT_SECRET=$(sh generar_password.sh -l 32 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    APP_KEY=$(sh generar_password.sh -l 32 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    
    cat > .env << EOF
# Configuraci√≥n de Base de Datos
DB_HOST=localhost
DB_PORT=5432
DB_NAME=mi_app
DB_USER=app_user
DB_PASSWORD=$DB_PASS

# Seguridad
JWT_SECRET=$JWT_SECRET
APP_KEY=$APP_KEY

# Aplicaci√≥n
APP_NAME=MiAplicacion
APP_ENV=production
APP_DEBUG=false
EOF
    
    chmod 600 .env
    echo "Archivo .env creado con contrase√±as seguras"
    echo "Permisos establecidos a 600 (solo lectura del propietario)"
}

# ===========================================
# 5. GENERAR M√öLTIPLES CONTRASE√ëAS PARA SERVIDORES
# ===========================================

generar_inventario_passwords() {
    echo "=== Generar Inventario de Contrase√±as ==="
    
    ARCHIVO="passwords_servidores_$(date +%Y%m%d).txt"
    
    {
        echo "========================================="
        echo "CONTRASE√ëAS DE SERVIDORES"
        echo "Generado: $(date)"
        echo "========================================="
        echo ""
        
        echo "SERVIDOR WEB (Apache/Nginx):"
        sh generar_password.sh -l 16 -c | grep -A5 "Generando"
        echo ""
        
        echo "BASE DE DATOS (MySQL/PostgreSQL):"
        sh generar_password.sh -l 20 -c | grep -A5 "Generando"
        echo ""
        
        echo "PANEL DE ADMINISTRACI√ìN:"
        sh generar_password.sh -l 24 -c | grep -A5 "Generando"
        echo ""
        
        echo "API KEY:"
        sh generar_password.sh -l 32 -c | grep -A5 "Generando"
        echo ""
        
        echo "========================================="
        echo "IMPORTANTE: Guarda este archivo de forma segura"
        echo "y elim√≠nalo despu√©s de transferir las contrase√±as"
        echo "========================================="
    } > "$ARCHIVO"
    
    chmod 600 "$ARCHIVO"
    echo "Inventario creado: $ARCHIVO"
    echo "Permisos: 600 (solo propietario)"
}

# ===========================================
# 6. CONFIGURAR SSH CON PASSPHRASE
# ===========================================

generar_ssh_key_con_passphrase() {
    echo "=== Generar SSH Key con Passphrase Segura ==="
    
    EMAIL="admin@miservidor.com"
    PASSPHRASE=$(sh generar_password.sh -l 24 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    
    echo "Generando clave SSH..."
    echo "Email: $EMAIL"
    echo "Passphrase: $PASSPHRASE"
    echo ""
    echo "Ejecuta:"
    echo "ssh-keygen -t ed25519 -C '$EMAIL' -f ~/.ssh/id_ed25519_servidor"
    echo ""
    echo "Cuando pida passphrase, usa: $PASSPHRASE"
    echo ""
    echo "¬°GUARDA LA PASSPHRASE DE FORMA SEGURA!"
}

# ===========================================
# 7. CONFIGURAR WORDPRESS
# ===========================================

configurar_wordpress() {
    echo "=== Generar Configuraci√≥n WordPress ==="
    
    DB_PASSWORD=$(sh generar_password.sh -l 20 -a | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    AUTH_KEY=$(sh generar_password.sh -l 64 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    SECURE_AUTH_KEY=$(sh generar_password.sh -l 64 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    LOGGED_IN_KEY=$(sh generar_password.sh -l 64 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    NONCE_KEY=$(sh generar_password.sh -l 64 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    
    echo "Configuraci√≥n para wp-config.php:"
    echo ""
    echo "define('DB_PASSWORD', '$DB_PASSWORD');"
    echo ""
    echo "define('AUTH_KEY',         '$AUTH_KEY');"
    echo "define('SECURE_AUTH_KEY',  '$SECURE_AUTH_KEY');"
    echo "define('LOGGED_IN_KEY',    '$LOGGED_IN_KEY');"
    echo "define('NONCE_KEY',        '$NONCE_KEY');"
}

# ===========================================
# 8. ROTAR CONTRASE√ëAS (Backup antiguas)
# ===========================================

rotar_contrase√±a() {
    echo "=== Rotar Contrase√±a con Backup ==="
    
    SERVICIO="mysql_root"
    FECHA=$(date +%Y%m%d_%H%M%S)
    NUEVA_PASSWORD=$(sh generar_password.sh -l 20 -c | grep -oP '\x1b\[0;32m\K[^\x1b]*' | head -1)
    
    # Crear directorio de backups si no existe
    mkdir -p ~/.password_backups
    chmod 700 ~/.password_backups
    
    # Guardar nueva contrase√±a
    echo "$FECHA - $SERVICIO: $NUEVA_PASSWORD" >> ~/.password_backups/password_history.txt
    chmod 600 ~/.password_backups/password_history.txt
    
    echo "Servicio: $SERVICIO"
    echo "Nueva contrase√±a: $NUEVA_PASSWORD"
    echo "Backup guardado en: ~/.password_backups/password_history.txt"
    echo ""
    echo "IMPORTANTE: Actualiza la contrase√±a en el servicio y gu√°rdala en tu gestor de contrase√±as"
}

# ===========================================
# MEN√ö PRINCIPAL
# ===========================================

mostrar_menu() {
    echo ""
    echo "========================================="
    echo "EJEMPLOS DE USO - GENERADOR DE CONTRASE√ëAS"
    echo "========================================="
    echo ""
    echo "1. Crear usuario MySQL"
    echo "2. Crear usuario de sistema Linux"
    echo "3. Crear usuario PostgreSQL"
    echo "4. Generar archivo .env"
    echo "5. Generar inventario de contrase√±as"
    echo "6. Generar SSH key con passphrase"
    echo "7. Configurar WordPress"
    echo "8. Rotar contrase√±a con backup"
    echo "0. Salir"
    echo ""
    echo -n "Selecciona una opci√≥n: "
}

# Ejecuci√≥n principal
if [ "$1" = "" ]; then
    mostrar_menu
    read opcion
    
    case $opcion in
        1) crear_usuario_mysql ;;
        2) crear_usuario_sistema ;;
        3) crear_usuario_postgresql ;;
        4) generar_archivo_env ;;
        5) generar_inventario_passwords ;;
        6) generar_ssh_key_con_passphrase ;;
        7) configurar_wordpress ;;
        8) rotar_contrase√±a ;;
        0) echo "Saliendo..." ;;
        *) echo "Opci√≥n inv√°lida" ;;
    esac
else
    # Permitir ejecutar funciones directamente
    case $1 in
        mysql) crear_usuario_mysql ;;
        sistema) crear_usuario_sistema ;;
        postgresql) crear_usuario_postgresql ;;
        env) generar_archivo_env ;;
        inventario) generar_inventario_passwords ;;
        ssh) generar_ssh_key_con_passphrase ;;
        wordpress) configurar_wordpress ;;
        rotar) rotar_contrase√±a ;;
        *) echo "Opci√≥n inv√°lida. Usa: mysql, sistema, postgresql, env, inventario, ssh, wordpress, rotar" ;;
    esac
fi



================================================================================
üìÑ ARCHIVO 21/27
================================================================================
Ruta relativa: scripts\bash\passgen\generar_password.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\passgen\generar_password.sh
================================================================================

#!/bin/sh
#
# Script para generar contrase√±as seguras
# Uso: ./generar_password.sh [opciones]
#

# Colores para output (opcional)
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # Sin color

# Funci√≥n para mostrar ayuda
mostrar_ayuda() {
    echo "${BLUE}==================================================${NC}"
    echo "${GREEN}  Generador de Contrase√±as Seguras${NC}"
    echo "${BLUE}==================================================${NC}"
    echo ""
    echo "Uso: $0 [opciones]"
    echo ""
    echo "Opciones:"
    echo "  -l, --longitud NUM    Longitud de la contrase√±a (por defecto: 16)"
    echo "  -n, --numero NUM      N√∫mero de contrase√±as a generar (por defecto: 1)"
    echo "  -s, --simple          Contrase√±a simple (solo letras y n√∫meros)"
    echo "  -c, --compleja        Contrase√±a compleja (letras, n√∫meros y s√≠mbolos)"
    echo "  -m, --memorable       Contrase√±a memorable (palabras + n√∫meros)"
    echo "  -a, --alfanumerica    Solo letras y n√∫meros (sin s√≠mbolos)"
    echo "  -h, --help            Mostrar esta ayuda"
    echo ""
    echo "Ejemplos:"
    echo "  $0                    # Genera 1 contrase√±a de 16 caracteres"
    echo "  $0 -l 24 -n 5         # Genera 5 contrase√±as de 24 caracteres"
    echo "  $0 -c -l 32           # Genera contrase√±a compleja de 32 caracteres"
    echo "  $0 -m                 # Genera contrase√±a memorable"
    echo ""
}

# Funci√≥n para generar contrase√±a con /dev/urandom
generar_password_urandom() {
    longitud=$1
    tipo=$2
    
    case $tipo in
        "simple")
            # Solo letras y n√∫meros
            tr -dc 'A-Za-z0-9' < /dev/urandom | head -c "$longitud"
            ;;
        "compleja")
            # Letras, n√∫meros y s√≠mbolos especiales
            tr -dc 'A-Za-z0-9!@#$%^&*()_+-=[]{}|;:,.<>?' < /dev/urandom | head -c "$longitud"
            ;;
        "alfanumerica")
            # Solo alfanum√©ricos
            tr -dc 'A-Za-z0-9' < /dev/urandom | head -c "$longitud"
            ;;
        *)
            # Por defecto: letras, n√∫meros y algunos s√≠mbolos seguros
            tr -dc 'A-Za-z0-9!@#$%^&*-_=+' < /dev/urandom | head -c "$longitud"
            ;;
    esac
    echo ""
}

# Funci√≥n para generar contrase√±a con openssl (alternativa)
generar_password_openssl() {
    longitud=$1
    openssl rand -base64 "$((longitud * 2))" | tr -dc 'A-Za-z0-9!@#$%^&*-_=+' | head -c "$longitud"
    echo ""
}

# Funci√≥n para generar contrase√±a memorable
generar_password_memorable() {
    # Lista de palabras comunes (puedes expandir esta lista)
    palabras="tigre leon agua fuego tierra viento rayo nube estrella luna sol mar monte rio valle bosque campo flor arbol piedra"
    
    palabra1=$(echo "$palabras" | tr ' ' '\n' | shuf -n 1)
    palabra2=$(echo "$palabras" | tr ' ' '\n' | shuf -n 1)
    numero=$(tr -dc '0-9' < /dev/urandom | head -c 3)
    simbolo=$(tr -dc '!@#$%^&*-_=+' < /dev/urandom | head -c 1)
    
    # Capitalizar primera letra
    palabra1_cap=$(echo "$palabra1" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
    palabra2_cap=$(echo "$palabra2" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
    
    echo "${palabra1_cap}${simbolo}${palabra2_cap}${numero}"
}

# Funci√≥n para verificar fortaleza de contrase√±a
verificar_fortaleza() {
    password=$1
    longitud=${#password}
    
    echo "${YELLOW}An√°lisis de fortaleza:${NC}"
    echo "  Longitud: $longitud caracteres"
    
    # Verificar tipos de caracteres
    tiene_minus=$(echo "$password" | grep -q '[a-z]' && echo "‚úì" || echo "‚úó")
    tiene_mayus=$(echo "$password" | grep -q '[A-Z]' && echo "‚úì" || echo "‚úó")
    tiene_nums=$(echo "$password" | grep -q '[0-9]' && echo "‚úì" || echo "‚úó")
    tiene_simb=$(echo "$password" | grep -q '[^A-Za-z0-9]' && echo "‚úì" || echo "‚úó")
    
    echo "  Min√∫sculas: $tiene_minus"
    echo "  May√∫sculas: $tiene_mayus"
    echo "  N√∫meros: $tiene_nums"
    echo "  S√≠mbolos: $tiene_simb"
    
    # Calcular entrop√≠a aproximada
    if [ "$longitud" -ge 16 ] && [ "$tiene_minus" = "‚úì" ] && [ "$tiene_mayus" = "‚úì" ] && [ "$tiene_nums" = "‚úì" ] && [ "$tiene_simb" = "‚úì" ]; then
        echo "  ${GREEN}Nivel: MUY FUERTE${NC}"
    elif [ "$longitud" -ge 12 ] && [ "$tiene_minus" = "‚úì" ] && [ "$tiene_mayus" = "‚úì" ] && [ "$tiene_nums" = "‚úì" ]; then
        echo "  ${GREEN}Nivel: FUERTE${NC}"
    elif [ "$longitud" -ge 8 ]; then
        echo "  ${YELLOW}Nivel: MEDIA${NC}"
    else
        echo "  ${YELLOW}Nivel: D√âBIL (aumenta la longitud)${NC}"
    fi
}

# Valores por defecto
LONGITUD=16
NUMERO=1
TIPO="default"
VERIFICAR=0

# Procesar argumentos
while [ $# -gt 0 ]; do
    case $1 in
        -l|--longitud)
            LONGITUD=$2
            shift 2
            ;;
        -n|--numero)
            NUMERO=$2
            shift 2
            ;;
        -s|--simple)
            TIPO="simple"
            shift
            ;;
        -c|--compleja)
            TIPO="compleja"
            shift
            ;;
        -m|--memorable)
            TIPO="memorable"
            shift
            ;;
        -a|--alfanumerica)
            TIPO="alfanumerica"
            shift
            ;;
        -v|--verificar)
            VERIFICAR=1
            shift
            ;;
        -h|--help)
            mostrar_ayuda
            exit 0
            ;;
        *)
            echo "Opci√≥n desconocida: $1"
            echo "Usa -h o --help para ver la ayuda"
            exit 1
            ;;
    esac
done

# Validar longitud
if [ "$LONGITUD" -lt 8 ]; then
    echo "${YELLOW}Advertencia: Se recomienda una longitud m√≠nima de 8 caracteres${NC}"
    echo "Ajustando a 8 caracteres..."
    LONGITUD=8
fi

# Generar contrase√±as
echo "${BLUE}==================================================${NC}"
echo "${GREEN}Generando $NUMERO contrase√±a(s)...${NC}"
echo "${BLUE}==================================================${NC}"
echo ""

for i in $(seq 1 "$NUMERO"); do
    if [ "$NUMERO" -gt 1 ]; then
        echo "${YELLOW}Contrase√±a #$i:${NC}"
    fi
    
    if [ "$TIPO" = "memorable" ]; then
        PASSWORD=$(generar_password_memorable)
    else
        # Intentar con /dev/urandom primero
        if [ -r /dev/urandom ]; then
            PASSWORD=$(generar_password_urandom "$LONGITUD" "$TIPO")
        # Si no est√° disponible, usar openssl
        elif command -v openssl > /dev/null 2>&1; then
            PASSWORD=$(generar_password_openssl "$LONGITUD")
        else
            echo "Error: No se encontr√≥ /dev/urandom ni openssl"
            exit 1
        fi
    fi
    
    echo "  ${GREEN}$PASSWORD${NC}"
    
    # Verificar fortaleza si se solicita
    if [ "$VERIFICAR" -eq 1 ] || [ "$NUMERO" -eq 1 ]; then
        echo ""
        verificar_fortaleza "$PASSWORD"
    fi
    
    echo ""
done

echo "${BLUE}==================================================${NC}"
echo "${YELLOW}Consejo: Guarda estas contrase√±as en un gestor seguro${NC}"
echo "${BLUE}==================================================${NC}"



================================================================================
üìÑ ARCHIVO 22/27
================================================================================
Ruta relativa: scripts\bash\passgen\README_PASSWORD.md
Path completo:  E:\git\wordpress-multisite\scripts\bash\passgen\README_PASSWORD.md
================================================================================

# Generador de Contrase√±as Seguras para Servidores

Script en Shell (sh) para generar contrase√±as seguras y aleatorias, ideal para administraci√≥n de servidores Linux/Unix.

## Caracter√≠sticas

‚úÖ M√∫ltiples niveles de complejidad
‚úÖ Contrase√±as memorables basadas en palabras
‚úÖ An√°lisis de fortaleza de contrase√±a
‚úÖ Compatible con sh, bash, zsh
‚úÖ No requiere dependencias especiales (usa /dev/urandom)
‚úÖ Colores para mejor visualizaci√≥n

## Instalaci√≥n

```bash
# Descargar el script
chmod +x generar_password.sh

# Mover a un directorio en tu PATH (opcional)
sudo mv generar_password.sh /usr/local/bin/genpass
```

## Uso B√°sico

```bash
# Generar 1 contrase√±a de 16 caracteres (por defecto)
./generar_password.sh

# Ver todas las opciones
./generar_password.sh --help
```

## Ejemplos de Uso

### Contrase√±a simple (solo letras y n√∫meros)
```bash
./generar_password.sh -s -l 20
# Ejemplo salida: Kj8mNp2qRt9xLw3vBh4Z
```

### Contrase√±a compleja (con s√≠mbolos especiales)
```bash
./generar_password.sh -c -l 24
# Ejemplo salida: X7k@mP#2qR$9tL&w3vB+h4Z
```

### Contrase√±a memorable
```bash
./generar_password.sh -m
# Ejemplo salida: Tigre@Luna492
```

### Generar m√∫ltiples contrase√±as
```bash
./generar_password.sh -n 5 -l 16
# Genera 5 contrase√±as de 16 caracteres
```

### Contrase√±a alfanum√©rica (sin s√≠mbolos)
```bash
./generar_password.sh -a -l 32
# √ötil para sistemas que no aceptan s√≠mbolos especiales
```

## Opciones Disponibles

| Opci√≥n | Descripci√≥n | Ejemplo |
|--------|-------------|---------|
| `-l, --longitud NUM` | Longitud de la contrase√±a | `-l 24` |
| `-n, --numero NUM` | Cantidad de contrase√±as | `-n 5` |
| `-s, --simple` | Solo letras y n√∫meros | `-s` |
| `-c, --compleja` | Con s√≠mbolos especiales | `-c` |
| `-m, --memorable` | Basada en palabras | `-m` |
| `-a, --alfanumerica` | Solo alfanum√©ricos | `-a` |
| `-h, --help` | Mostrar ayuda | `-h` |

## Recomendaciones de Seguridad

### Longitud Recomendada por Uso

| Tipo de Servidor | Longitud M√≠nima | Ejemplo de Comando |
|------------------|-----------------|-------------------|
| Servidor web | 16 caracteres | `./generar_password.sh -l 16` |
| Base de datos | 20 caracteres | `./generar_password.sh -c -l 20` |
| Root/Admin | 24-32 caracteres | `./generar_password.sh -c -l 32` |
| SSH Keys passphrase | 20-30 caracteres | `./generar_password.sh -l 24` |

### Mejores Pr√°cticas

1. **Nunca reutilices contrase√±as** entre diferentes servidores
2. **Usa un gestor de contrase√±as** para almacenarlas de forma segura
3. **Cambia las contrase√±as peri√≥dicamente** (cada 3-6 meses)
4. **Usa autenticaci√≥n de dos factores** cuando sea posible
5. **Haz backup cifrado** de tus contrase√±as

## Casos de Uso Comunes

### 1. Configurar usuario MySQL
```bash
# Generar contrase√±a para MySQL
PASSWORD=$(./generar_password.sh -l 20 -a | grep -oP '(?<=  ).*')
echo "CREATE USER 'myuser'@'localhost' IDENTIFIED BY '$PASSWORD';" | mysql -u root -p
```

### 2. Crear usuario de sistema con contrase√±a
```bash
# Generar y asignar contrase√±a
PASSWORD=$(./generar_password.sh -l 16 -a | grep -oP '(?<=  ).*')
sudo useradd -m usuario_nuevo
echo "usuario_nuevo:$PASSWORD" | sudo chpasswd
echo "Contrase√±a para usuario_nuevo: $PASSWORD"
```

### 3. Generar archivo con m√∫ltiples contrase√±as
```bash
# Crear archivo con 10 contrase√±as para diferentes servicios
./generar_password.sh -n 10 -l 20 -c > contrase√±as_servidores.txt
chmod 600 contrase√±as_servidores.txt
```

### 4. Integrar en script de aprovisionamiento
```bash
#!/bin/bash
# Script de configuraci√≥n autom√°tica

MYSQL_PASS=$(./generar_password.sh -l 20 -a | grep -oP '(?<=  ).*')
ADMIN_PASS=$(./generar_password.sh -l 24 -c | grep -oP '(?<=  ).*')

echo "MySQL Password: $MYSQL_PASS" >> /root/credentials.txt
echo "Admin Password: $ADMIN_PASS" >> /root/credentials.txt
chmod 600 /root/credentials.txt
```

## An√°lisis de Fortaleza

El script analiza autom√°ticamente la fortaleza de cada contrase√±a generada:

- ‚úì Verifica presencia de min√∫sculas
- ‚úì Verifica presencia de may√∫sculas
- ‚úì Verifica presencia de n√∫meros
- ‚úì Verifica presencia de s√≠mbolos
- ‚úì Eval√∫a la longitud total
- ‚úì Clasifica el nivel (D√âBIL, MEDIA, FUERTE, MUY FUERTE)

## Tecnolog√≠a Utilizada

El script utiliza `/dev/urandom` como fuente de aleatoriedad criptogr√°ficamente segura, lo que garantiza que las contrase√±as generadas sean impredecibles y seguras.

Si `/dev/urandom` no est√° disponible, el script intenta usar `openssl` como alternativa.

## Compatibilidad

- ‚úÖ Linux (todas las distribuciones)
- ‚úÖ macOS
- ‚úÖ BSD
- ‚úÖ Unix
- ‚úÖ WSL (Windows Subsystem for Linux)

## Soluci√≥n de Problemas

### Error: "Permission denied"
```bash
chmod +x generar_password.sh
```

### Error: "No se encontr√≥ /dev/urandom ni openssl"
```bash
# Instalar openssl
# Ubuntu/Debian:
sudo apt-get install openssl

# CentOS/RHEL:
sudo yum install openssl

# macOS (viene preinstalado)
```

## Seguridad del Script

- No almacena contrase√±as en ning√∫n archivo
- No env√≠a datos a trav√©s de la red
- Usa fuentes de aleatoriedad criptogr√°ficamente seguras
- No requiere permisos de root
- Es completamente open source

## Contribuir

Si encuentras alg√∫n bug o tienes sugerencias de mejora, no dudes en reportarlo.

## Licencia

Este script es de c√≥digo abierto y puede ser usado libremente.

---

**‚ö†Ô∏è Importante:** Recuerda siempre guardar tus contrase√±as en un gestor de contrase√±as seguro como KeePassXC, Bitwarden, 1Password o similar.



================================================================================
üìÑ ARCHIVO 23/27
================================================================================
Ruta relativa: scripts\bash\setup.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\setup.sh
================================================================================

#!/bin/bash
# Script de setup inicial para WordPress Multisite

set -e

echo "==================================="
echo "WordPress Multisite - Setup Inicial"
echo "==================================="
echo ""

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Verificar que estamos en el directorio correcto
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}Error: docker-compose.yml no encontrado${NC}"
    echo "Ejecuta este script desde el directorio wordpress-multisite/"
    exit 1
fi

# Verificar Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker no est√° instalado${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "${RED}Error: Docker Compose no est√° instalado${NC}"
    exit 1
fi

echo -e "${YELLOW}1. Verificando archivo .env...${NC}"
if [ ! -f ".env" ]; then
    echo -e "${RED}Error: Archivo .env no encontrado${NC}"
    exit 1
fi

# Verificar que se cambiaron las contrase√±as
if grep -q "tu_password" .env; then
    echo -e "${RED}¬°ADVERTENCIA! Debes cambiar las contrase√±as en el archivo .env${NC}"
    echo "Edita el archivo .env antes de continuar"
    exit 1
fi

echo -e "${GREEN}‚úì Archivo .env verificado${NC}"

echo ""
echo -e "${YELLOW}2. Creando estructura de directorios...${NC}"

# Crear directorios necesarios
mkdir -p www/{sitio1,sitio2,sitio3,sitio4,sitio5,sitio6,sitio7,sitio8,sitio9,sitio10}
mkdir -p mysql/data
mkdir -p logs/nginx
mkdir -p certbot/{conf,www}
mkdir -p nginx/conf.d

# Establecer permisos
chmod -R 755 www/
chmod -R 755 logs/

echo -e "${GREEN}‚úì Directorios creados${NC}"

echo ""
echo -e "${YELLOW}3. Descargando WordPress...${NC}"

# Descargar WordPress en cada directorio si no existe
for i in {1..10}; do
    if [ ! -f "www/sitio$i/wp-config.php" ] && [ ! -f "www/sitio$i/index.php" ]; then
        echo "Descargando WordPress para sitio$i..."
        cd www/sitio$i
        curl -O https://wordpress.org/latest.tar.gz
        tar -xzf latest.tar.gz --strip-components=1
        rm latest.tar.gz
        cd ../..
    else
        echo "WordPress ya existe en sitio$i"
    fi
done

echo -e "${GREEN}‚úì WordPress descargado${NC}"

echo ""
echo -e "${YELLOW}4. Configurando permisos...${NC}"

# Permisos para WordPress
chown -R www-data:www-data www/ 2>/dev/null || chown -R 33:33 www/
find www/ -type d -exec chmod 755 {} \;
find www/ -type f -exec chmod 644 {} \;

echo -e "${GREEN}‚úì Permisos configurados${NC}"

echo ""
echo -e "${YELLOW}5. Iniciando contenedores...${NC}"

docker-compose up -d

echo ""
echo -e "${GREEN}‚úì Contenedores iniciados${NC}"

echo ""
echo "==================================="
echo -e "${GREEN}Setup completado!${NC}"
echo "==================================="
echo ""
echo "Pr√≥ximos pasos:"
echo ""
echo "1. Configurar DNS apuntando tus dominios a: $(curl -s ifconfig.me)"
echo ""
echo "2. Obtener certificados SSL:"
echo "   ./scripts/get-ssl.sh sitio1.com"
echo "   ./scripts/get-ssl.sh sitio2.com"
echo "   (repetir para cada dominio)"
echo ""
echo "3. Acceder a cada sitio y completar instalaci√≥n WordPress:"
echo "   https://sitio1.com"
echo "   https://sitio2.com"
echo "   etc..."
echo ""
echo "4. Configurar wp-config.php en cada sitio:"
echo "   - DB_NAME: wp_sitio1, wp_sitio2, etc."
echo "   - DB_USER: wpuser"
echo "   - DB_PASSWORD: (del archivo .env)"
echo "   - DB_HOST: mysql"
echo ""
echo "5. Acceder a phpMyAdmin: https://pma.tu-dominio.com"
echo ""
echo "6. Acceder a FTP:"
echo "   - Host: $(curl -s ifconfig.me)"
echo "   - Puerto: 21"
echo "   - Usuario: ftpuser"
echo "   - Password: (del archivo .env)"
echo ""
echo "Para ver logs: docker-compose logs -f"
echo "Para detener: docker-compose down"
echo ""



================================================================================
üìÑ ARCHIVO 24/27
================================================================================
Ruta relativa: scripts\bash\verify.sh
Path completo:  E:\git\wordpress-multisite\scripts\bash\verify.sh
================================================================================

#!/bin/bash
# Script de verificaci√≥n antes del despliegue

set -e

# Colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

errors=0
warnings=0

echo "=========================================="
echo "Verificaci√≥n Pre-Deploy"
echo "=========================================="
echo ""

# Verificar Docker
echo -n "Verificando Docker... "
if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${RED}‚úó Docker no instalado${NC}"
    errors=$((errors + 1))
fi

# Verificar Docker Compose
echo -n "Verificando Docker Compose... "
if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${RED}‚úó Docker Compose no instalado${NC}"
    errors=$((errors + 1))
fi

# Verificar archivo .env
echo -n "Verificando archivo .env... "
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úì${NC}"
    
    # Verificar que se cambiaron las contrase√±as
    echo -n "  Verificando contrase√±as personalizadas... "
    if grep -q "tu_password" .env; then
        echo -e "${RED}‚úó Debes cambiar las contrase√±as en .env${NC}"
        errors=$((errors + 1))
    else
        echo -e "${GREEN}‚úì${NC}"
    fi
    
    # Verificar que se configur√≥ la IP
    echo -n "  Verificando IP del servidor... "
    if grep -q "tu.ip.del.servidor" .env; then
        echo -e "${YELLOW}‚ö† Debes configurar SERVER_IP en .env${NC}"
        warnings=$((warnings + 1))
    else
        echo -e "${GREEN}‚úì${NC}"
    fi
else
    echo -e "${RED}‚úó Archivo .env no encontrado${NC}"
    errors=$((errors + 1))
fi

# Verificar estructura de directorios
echo -n "Verificando directorios... "
dirs=("nginx/conf.d" "php" "mysql" "mysql/init" "scripts" "www")
missing_dirs=0
for dir in "${dirs[@]}"; do
    if [ ! -d "$dir" ]; then
        missing_dirs=$((missing_dirs + 1))
    fi
done

if [ $missing_dirs -eq 0 ]; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${RED}‚úó Faltan $missing_dirs directorios${NC}"
    errors=$((errors + 1))
fi

# Verificar archivos de configuraci√≥n
echo -n "Verificando archivos de configuraci√≥n... "
configs=(
    "docker-compose.yml"
    "nginx/nginx.conf"
    "php/php.ini"
    "php/www.conf"
    "mysql/my.cnf"
    "mysql/init/01-init-databases.sql"
)
missing_configs=0
for config in "${configs[@]}"; do
    if [ ! -f "$config" ]; then
        missing_configs=$((missing_configs + 1))
    fi
done

if [ $missing_configs -eq 0 ]; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${RED}‚úó Faltan $missing_configs archivos de configuraci√≥n${NC}"
    errors=$((errors + 1))
fi

# Verificar configuraciones de Nginx
echo -n "Verificando virtual hosts de Nginx... "
vhosts=$(ls nginx/conf.d/*.conf 2>/dev/null | wc -l)
if [ $vhosts -ge 2 ]; then
    echo -e "${GREEN}‚úì ($vhosts configurados)${NC}"
else
    echo -e "${YELLOW}‚ö† Solo $vhosts configurados (m√≠nimo recomendado: 3)${NC}"
    warnings=$((warnings + 1))
fi

# Verificar permisos de scripts
echo -n "Verificando permisos de scripts... "
if [ -x "scripts/setup.sh" ]; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${YELLOW}‚ö† Scripts sin permisos de ejecuci√≥n${NC}"
    echo "  Ejecuta: chmod +x scripts/*.sh"
    warnings=$((warnings + 1))
fi

# Verificar puertos disponibles
echo -n "Verificando puertos... "
ports_in_use=()
for port in 80 443 21; do
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1 || netstat -tuln 2>/dev/null | grep -q ":$port "; then
        ports_in_use+=($port)
    fi
done

if [ ${#ports_in_use[@]} -eq 0 ]; then
    echo -e "${GREEN}‚úì${NC}"
else
    echo -e "${YELLOW}‚ö† Puertos en uso: ${ports_in_use[*]}${NC}"
    echo "  Esto puede causar conflictos. Verifica con: netstat -tuln"
    warnings=$((warnings + 1))
fi

# Verificar memoria disponible
echo -n "Verificando memoria RAM... "
ram_total=$(free -m | awk 'NR==2{print $2}')
if [ $ram_total -ge 7000 ]; then
    echo -e "${GREEN}‚úì ${ram_total}MB disponibles${NC}"
elif [ $ram_total -ge 6000 ]; then
    echo -e "${YELLOW}‚ö† ${ram_total}MB (cerca del m√≠nimo recomendado)${NC}"
    warnings=$((warnings + 1))
else
    echo -e "${RED}‚úó Solo ${ram_total}MB (se recomienda m√≠nimo 8GB)${NC}"
    errors=$((errors + 1))
fi

# Verificar espacio en disco
echo -n "Verificando espacio en disco... "
disk_available=$(df / | awk 'NR==2{print $4}')
disk_available_gb=$((disk_available / 1024 / 1024))
if [ $disk_available_gb -ge 20 ]; then
    echo -e "${GREEN}‚úì ${disk_available_gb}GB disponibles${NC}"
elif [ $disk_available_gb -ge 10 ]; then
    echo -e "${YELLOW}‚ö† ${disk_available_gb}GB (moderado)${NC}"
    warnings=$((warnings + 1))
else
    echo -e "${RED}‚úó Solo ${disk_available_gb}GB (insuficiente)${NC}"
    errors=$((errors + 1))
fi

echo ""
echo "=========================================="
echo "Resumen"
echo "=========================================="

if [ $errors -eq 0 ] && [ $warnings -eq 0 ]; then
    echo -e "${GREEN}‚úì Todo listo para el despliegue${NC}"
    echo ""
    echo "Pr√≥ximos pasos:"
    echo "1. Ejecuta: ./scripts/setup.sh"
    echo "2. Obt√©n certificados SSL para cada dominio"
    echo "3. Configura cada sitio WordPress"
elif [ $errors -eq 0 ]; then
    echo -e "${YELLOW}‚ö† $warnings advertencia(s) encontrada(s)${NC}"
    echo "Puedes continuar, pero revisa las advertencias"
    echo ""
    echo "Para continuar: ./scripts/setup.sh"
else
    echo -e "${RED}‚úó $errors error(es) cr√≠tico(s) encontrado(s)${NC}"
    if [ $warnings -gt 0 ]; then
        echo -e "${YELLOW}‚ö† $warnings advertencia(s) encontrada(s)${NC}"
    fi
    echo ""
    echo "Corrige los errores antes de continuar"
    exit 1
fi

echo ""


================================================================================
üìÑ ARCHIVO 27/27
================================================================================
Ruta relativa: wp-config-sample.php
Path completo:  E:\git\wordpress-multisite\wp-config-sample.php
================================================================================

<?php
/**
 * Configuraci√≥n de WordPress para Docker
 * 
 * Copiar este archivo como wp-config.php en cada directorio de sitio
 * y ajustar los valores seg√∫n corresponda
 */

// ** Configuraci√≥n de MySQL - Obtener valores de .env ** //

/** Nombre de la base de datos (cambiar para cada sitio) */
define('DB_NAME', 'wp_sitio1');  // wp_sitio2, wp_sitio3, etc.

/** Usuario de la base de datos */
define('DB_USER', 'wpuser');

/** Contrase√±a de la base de datos (usar la del archivo .env) */
define('DB_PASSWORD', 'tu_password_del_archivo_env');

/** Servidor de base de datos (nombre del contenedor Docker) */
define('DB_HOST', 'mysql');

/** Charset de la base de datos */
define('DB_CHARSET', 'utf8mb4');

/** Cotejamiento de la base de datos */
define('DB_COLLATE', 'utf8mb4_unicode_ci');

/**#@+
 * Claves √∫nicas de autenticaci√≥n y salado.
 *
 * Define cada clave con una frase aleatoria distinta.
 * Puedes generarlas usando el {@link https://api.wordpress.org/secret-key/1.1/salt/ servicio de claves secretas de WordPress}
 * Puedes cambiar las claves en cualquier momento para invalidar todas las cookies existentes.
 *
 * @since 2.6.0
 */
define('AUTH_KEY',         'pon aqu√≠ tu clave √∫nica de frase');
define('SECURE_AUTH_KEY',  'pon aqu√≠ tu clave √∫nica de frase');
define('LOGGED_IN_KEY',    'pon aqu√≠ tu clave √∫nica de frase');
define('NONCE_KEY',        'pon aqu√≠ tu clave √∫nica de frase');
define('AUTH_SALT',        'pon aqu√≠ tu clave √∫nica de frase');
define('SECURE_AUTH_SALT', 'pon aqu√≠ tu clave √∫nica de frase');
define('LOGGED_IN_SALT',   'pon aqu√≠ tu clave √∫nica de frase');
define('NONCE_SALT',       'pon aqu√≠ tu clave √∫nica de frase');

/**#@-*/

/**
 * Prefijo de la base de datos de WordPress.
 *
 * Puedes tener m√∫ltiples instalaciones en una misma base de datos si les das a cada una un prefijo √∫nico.
 */
$table_prefix = 'wp_';

/**
 * Para desarrolladores: modo de depuraci√≥n de WordPress.
 *
 * Cambia esto a true para activar la notificaci√≥n de errores durante el desarrollo.
 * Se recomienda encarecidamente a los desarrolladores de plugins y temas que usen WP_DEBUG
 * en sus entornos de desarrollo.
 */
define('WP_DEBUG', false);

/**
 * Configuraci√≥n adicional recomendada para Docker/producci√≥n
 */

// Forzar HTTPS (descomenta si usas SSL)
// define('FORCE_SSL_ADMIN', true);
// if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
//     $_SERVER['HTTPS'] = 'on';
// }

// Aumentar memoria si es necesario
// define('WP_MEMORY_LIMIT', '256M');

// Desactivar edici√≥n de archivos desde el panel
define('DISALLOW_FILE_EDIT', true);

// L√≠mite de revisiones de posts
define('WP_POST_REVISIONS', 5);

// Vaciar papelera autom√°ticamente (d√≠as)
define('EMPTY_TRASH_DAYS', 30);

// Reparaci√≥n de base de datos (activar solo cuando sea necesario)
// define('WP_ALLOW_REPAIR', true);

/* ¬°Eso es todo, det√©n de editar! Feliz blogging. */

/** Ruta absoluta al directorio de WordPress. */
if ( !defined('ABSPATH') )
    define('ABSPATH', dirname(__FILE__) . '/');

/** Configura las variables de WordPress y los archivos incluidos. */
require_once(ABSPATH . 'wp-settings.php');


